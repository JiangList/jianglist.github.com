(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{1104:function(r,n,i){"use strict";i.r(n);var e=i(1),t=Object(e.a)({},(function(){var r=this,n=r.$createElement,i=r._self._c||n;return i("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[i("h2",{attrs:{id:"什么是spring"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#什么是spring"}},[r._v("#")]),r._v(" 什么是Spring?")]),r._v(" "),i("p",[r._v("要谈Spring的历史，就要先谈J2EE。J2EE应用程序的广泛实现是在1999年和2000年开始的，它的出现带来了诸如事务管理之类的核心中间层概念的标准化，但是在实践中并没有获得绝对的成功，因为开发效率，开发难度和实际的性能都令人失望。 曾经使用过EJB开发JAVA EE应用的人，一定知道，在EJB开始的学习和应用非常的艰苦，很多东西都不能一下子就很容易的理解。EJB要严格地实现各种不同类型的接口，类似的或者重复的代码大量存在。而配置也是复杂和单调，同样使用JNDI进行对象查找的代码也是单调而枯燥。虽然有一些开发工作随着xdoclet的出现，而有所缓解，但是学习EJB的高昂代价，和极低的开发效率，极高的资源消耗，都造成了EJB的使用困难。而Spring出现的初衷就是为了解决类似的这些问题。 Spring的一个最大的目的就是使JAVA EE开发更加容易。同时，Spring之所以与Struts、Hibernate等单层框架不同，是因为Spring致力于提供一个以统一的、高效的方式构造整个应用，并且可以将单层框架以最佳的组合揉和在一起建立一个连贯的体系。可以说Spring是一个提供了更完善开发环境的一个框架，可以为POJO(Plain Ordinary Java Object)对象提供企业级的服务。 Spring的形成，最初来自Rod Jahnson所著的一本很有影响力的书籍"),i("a",{attrs:{href:"https://item.jd.com/68619611892.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Expert One-on-One J2EE Design and Development  (opens new window)》"),i("OutboundLink")],1),r._v("，就是在这本书中第一次出现了Spring的一些核心思想，该书出版于2002年。 ¶ Spring的特性和优势")]),r._v(" "),i("h2",{attrs:{id:"spring的特性和优势"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#spring的特性和优势"}},[r._v("#")]),r._v(" Spring的特性和优势")]),r._v(" "),i("p",[r._v("从Spring 框架的特性来看：")]),r._v(" "),i("ul",[i("li",[r._v("非侵入式：基于Spring开发的应用中的对象可以不依赖于Spring的API")]),r._v(" "),i("li",[r._v("控制反转：IOC——Inversion of Control，指的是将对象的创建权交给 Spring 去创建。使用 Spring 之前，对象的创建都是由我们自己在代码中new创建。而使用 Spring 之后。对象的创建都是给了 Spring 框架。")]),r._v(" "),i("li",[r._v("依赖注入：DI——Dependency Injection，是指依赖的对象不需要手动调用 setXX 方法去设置，而是通过配置赋值。")]),r._v(" "),i("li",[r._v("面向切面编程：Aspect Oriented Programming——AOP")]),r._v(" "),i("li",[r._v("容器：Spring 是一个容器，因为它包含并且管理应用对象的生命周期")]),r._v(" "),i("li",[r._v("组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象。")]),r._v(" "),i("li",[r._v("一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上 Spring 自身也提供了表现层的 SpringMVC 和持久层的 Spring JDBC）\n从使用Spring 框架的好处看：")]),r._v(" "),i("li",[r._v("Spring 可以使开发人员使用 POJOs 开发企业级的应用程序。只使用 POJOs 的好处是你不需要一个 EJB 容器产品，比如一个应用程序服务器，但是你可以选择使用一个健壮的 servlet 容器，比如 Tomcat 或者一些商业产品。")]),r._v(" "),i("li",[r._v("Spring 在一个单元模式中是有组织的。即使包和类的数量非常大，你只要担心你需要的，而其它的就可以忽略了。")]),r._v(" "),i("li",[r._v("Spring 不会让你白费力气做重复工作，它真正的利用了一些现有的技术，像 ORM 框架、日志框架、JEE、Quartz 和 JDK 计时器，其他视图技术。 测试一个用")]),r._v(" "),i("li",[r._v("Spring 编写的应用程序很容易，因为环境相关的代码被移动到这个框架中。此外，通过使用 JavaBean-style POJOs，它在使用依赖注入注入测试数据时变得更容易。")]),r._v(" "),i("li",[r._v("Spring 的 web 框架是一个设计良好的 web MVC 框架，它为比如 Structs 或者其他工程上的或者不怎么受欢迎的 web 框架提供了一个很好的供替代的选择。MVC 模式导致应用程序的不同方面(输入逻辑，业务逻辑和UI逻辑)分离，同时提供这些元素之间的松散耦合。模型(Model)封装了应用程序数据，通常它们将由 POJO 类组成。视图(View)负责渲染模型数据，一般来说它生成客户端浏览器可以解释 HTML 输出。控制器(Controller)负责处理用户请求并构建适当的模型，并将其传递给视图进行渲染。")]),r._v(" "),i("li",[r._v("Spring 对 JavaEE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。 轻量级的 IOC 容器往往是轻量级的，例如，特别是当与 EJB 容器相比的时候。这有利于在内存和 CPU 资源有限的计算机上开发和部署应用程序。")]),r._v(" "),i("li",[r._v("Spring 提供了一致的事务管理接口，可向下扩展到（使用一个单一的数据库，例如）本地事务并扩展到全局事务（例如，使用 JTA）")])]),r._v(" "),i("p",[r._v("参考网址："),i("a",{attrs:{href:"https://www.pdai.tech/md/spring/spring-x-framework-introduce.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://www.pdai.tech/md/spring/spring-x-framework-introduce.html"),i("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=t.exports}}]);